#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Home row mods settings

// Speed without triggering modifier
#define TAPPING_RESOLUTION 125

// Hold time for tap-preferred behavior
#define HOLD_TYPE "tap-preferred"

// Time to wait after typing before mods are available
#define STREAK_DECAY (TAPPING_RESOLUTION + 100)

// Time to auto-repeat key
#define REPEAT_DECAY (TAPPING_RESOLUTION + 150)

// Time to trigger layer
#define LAYER_HOLD_TIME (TAPPING_RESOLUTION + 50)

// Time to trigger home row mods
#define HRM_HOLD_TIME (TAPPING_RESOLUTION + 20)

// Time to trigger tap dance
#define TAP_DANCE_TIME (TAPPING_RESOLUTION + 200)

// Idle time before sticky keys are released
#define IDLE_TIMEOUT_MS 5000

&lt {
    // Layer toggle
    flavor = HOLD_TYPE;
    tapping-term-ms = <LAYER_HOLD_TIME>;
    quick-tap-ms = <REPEAT_DECAY>;
};
&sk {
    // Sticky keys settings, One Shot Keys [QMK]

    release-after-ms = <IDLE_TIMEOUT_MS>;
    quick-release;
};
&caps_word {
    // Allow caps word to continue even when minus or underscore are pressed.
    // Also prevent mod presses from cancelling caps word.

    continue-list = <
      UNDERSCORE MINUS
      LCTRL LALT LGUI LSHFT
      RCTRL RALT RGUI RSHFT
      BACKSPACE
    >;

    /delete-property/ ignore-modifiers;
};
/ {
    behaviors {
        hrm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = HOLD_TYPE;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <HRM_HOLD_TIME>;
            quick-tap-ms = <REPEAT_DECAY>;
            require-prior-idle-ms = <STREAK_DECAY>;
        };

        ss_cw: shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <TAP_DANCE_TIME>;
        };

        cln_scln_td: cln_scln_td {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
&kp Q            &kp W            &kp F                &kp P              &kp G   &kp J      &kp L               &kp U                 &kp Y             &kp APOSTROPHE
&hrm LEFT_GUI A  &hrm LEFT_ALT R  &hrm LEFT_CONTROL S  &hrm LEFT_SHIFT T  &kp D   &kp H      &hrm RIGHT_SHIFT N  &hrm RIGHT_CONTROL E  &hrm RIGHT_ALT I  &hrm RIGHT_GUI O
&kp Z            &kp X            &kp C                &kp V              &kp B   &kp K      &kp M               &kp COMMA             &kp PERIOD        &kp SLASH
                                  &lt 5 ESC            &lt 3 SPACE        &ss_cw  &kp ENTER  &lt 1 BACKSPACE     &lt 2 DELETE
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>,
                <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        num_fun {
            display-name = "Numbers";
            bindings = <
&key_repeat  &kp N7  &kp N8     &kp N9  &none      &kp C_PREV  &kp F7  &kp F8  &kp F9  &kp F12
&none        &kp N4  &kp N5     &kp N6  &none      &kp C_PP    &kp F4  &kp F5  &kp F6  &none
&none        &kp N1  &kp N2     &kp N3  &kp DOT    &kp C_NEXT  &kp F1  &kp F2  &kp F3  &none
                     &kp EQUAL  &kp N0  &kp MINUS  &trans      &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(Z) LC(Y)>;
        };

        sym_uti {
            display-name = "Symbols";
            bindings = <
&kp PERCENT  &kp CARET      &kp DOLLAR       &kp RA(N5)  &cln_scln_td    &none   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN    &kp HASH
&kp FSLH     &kp ASTERISK   &kp MINUS        &kp PLUS    &kp PIPE        &none   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN  &kp GREATER_THAN
&kp BSLH     &kp AMPERSAND  &kp EXCLAMATION  &kp EQUAL   &kp UNDERSCORE  &none   &kp LBKT              &kp RBKT               &kp TILDE      &kp GRAVE
                            &trans           &trans      &trans          &trans  &trans                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(RIGHT_ARROW) LC(LEFT_ARROW)>;
        };

        nav_sys {
            display-name = "System keys";
            bindings = <
&none      &kp LS(TAB)  &kp TAB    &kp LS(LC(TAB))  &kp LC(TAB)    &kp PG_UP      &kp H          &kp J     &kp K   &kp L
&kp LC(A)  &none        &none      &kp TAB          &none          &kp PG_DN      &kp LEFT       &kp DOWN  &kp UP  &kp RIGHT
&kp LC(Z)  &kp LC(X)    &kp LC(C)  &kp LC(V)        &kp LS(LC(V))  &kp LC(LG(K))  &kp LS(LG(S))  &none     &none   &none
                        &trans     &trans           &tog 4         &trans         &trans         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp K_FORWARD C_REWIND>,
                <&inc_dec_kp C_FAST_FORWARD C_REWIND>;
        };

        flat {
            display-name = "Flat keyboard";
            bindings = <
&kp Q  &kp W  &kp F    &kp P      &kp G      &kp J      &kp L     &kp U      &kp Y    &kp LEFT_ALT
&kp A  &kp R  &kp S    &kp T      &kp D      &kp H      &kp N     &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C    &kp V      &kp B      &kp K      &kp M     &kp COMMA  &kp DOT  &kp FSLH
              &kp ESC  &kp SPACE  &kp LSHFT  &kp ENTER  &kp BSPC  &tog 4
            >;
        };

        kb_sett {
            display-name = "Settings";
            bindings = <
&kp LA(TAB)  &none   &kp LG(LC(LEFT_ARROW))  &kp LG(RC(RIGHT_ARROW))  &trans   &trans          &trans        &trans            &none          &none
&none        &trans  &kp LG(PG_UP)           &kp LG(PG_DN)            &trans  &kp LG(LEFT_ARROW)  &kp LG(DOWN)  &kp LG(UP_ARROW)  &kp LG(RIGHT)  &none
&kp LG(Z)    &none   &none                   &none                    &sys_reset   &sys_reset          &trans        &trans            &trans         &trans
                     &trans                  &none                    &bootloader  &bootloader         &none         &trans
            >;

            extra1 { status = "reserved"; };

            extra2 { status = "reserved"; };
        };

        sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
    };
};
